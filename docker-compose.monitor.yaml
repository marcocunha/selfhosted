#-------------------------------------------------------------
# Docker compose related to monitoring services
#-------------------------------------------------------------
version: '3.8'

services:
  # Portainer CE
  # Managing containers via nice web UI
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    restart: always
    ports:
      - "9000:9000/tcp"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${SELF_HOME_DIR}/portainer:/data
    env_file:
      - .env

  # Duplicati
  # Free backup software to store encrypted backups online
  # https://github.com/duplicati/duplicati
  duplicati:
    container_name: duplicati
    image: lscr.io/linuxserver/duplicati
    env_file:
      - .env
    volumes:
      - ${SELF_HOME_DIR}/duplicati/config/:/config
      - ${SELF_HOME_DIR}:/source
    ports:
      - 8200:8200
    restart: unless-stopped
      
  # Grafana
  # Grafana allows you to query, visualize, 
  # alert on and understand your metrics no matter where they are stored.
  # https://github.com/grafana/grafana
  grafana:
    container_name: grafana
    image: grafana/grafana
    volumes:
      - ${SELF_HOME_DIR}/grafana/data:/var/lib/grafana
      - ${SELF_HOME_DIR}/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    user: "104"
    expose:
      - 3000
    env_file:
      - .env
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  # Prometheus
  # Systems and service monitoring system. 
  # It collects metrics from configured targets at given intervals, 
  # evaluates rule expressions, displays the results, 
  # and can trigger alerts when specified conditions are observed.
  # https://github.com/prometheus/prometheus
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.17.1
    volumes:
      - ${SELF_HOME_DIR}/prometheus:/etc/prometheus
      - ${SELF_HOME_DIR}/prometheus/data:/prometheus
    profiles:
    - donotstart #do not start service
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  # Alert Manager
  # It handles alerts sent by client applications such as the Prometheus server. 
  # It takes care of deduplicating, grouping, and 
  # routing them to the correct receiver integration such as email, 
  # PagerDuty, or OpsGenie. 
  # It also takes care of silencing and inhibition of alerts.
  # https://prometheus.io/docs/alerting/latest/alertmanager/
  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:v0.20.0
    profiles:
      - donotstart #do not start service
    volumes:
      - ${SELF_HOME_DIR}/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  # Node Exporter
  # Prometheus exporter for hardware and OS metrics exposed by *NIX kernels, 
  # written in Go with pluggable metric collectors.
  # https://github.com/prometheus/node_exporter
  nodeexporter:
    image: prom/node-exporter:latest
    container_name: nodeexporter
    profiles:
      - donotstart #do not start service
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  # cAdvisor (Container Advisor)
  # Provides container users an understanding of the resource usage 
  # and performance characteristics of their running containers
  # https://github.com/google/cadvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    profiles:
      - donotstart #do not start service
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  # Prometheus Pushgateway
  # The Prometheus Pushgateway exists to allow ephemeral and batch jobs to 
  # expose their metrics to Prometheus. 
  # Since these kinds of jobs may not exist long enough to be scraped, 
  # they can instead push their metrics to a Pushgateway. 
  # The Pushgateway then exposes these metrics to Prometheus.
  # https://github.com/prometheus/pushgateway
  pushgateway:
    container_name: pushgateway
    image: prom/pushgateway
    profiles:
      - donotstart #do not start service
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  # Caddy 2
  # Is a powerful, enterprise-ready, open source web server 
  # with automatic HTTPS written in Go.
  # https://github.com/caddyserver/caddy-docker
  caddy:
    image: stefanprodan/caddy
    container_name: caddy
    profiles:
      - donotstart #do not start service
    ports:
      - "3000:3000"
      - "9090:9090"
      - "9093:9093"
      - "9091:9091"
    volumes:
      - ${SELF_HOME_DIR}/caddy:/etc/caddy
    restart: unless-stopped
    networks:
      - monitor-net
    env_file:
      - .env
    labels:
      org.label-schema.group: "monitoring"

  # Uptime Kuma
  # Uptime Kuma is an easy-to-use self-hosted monitoring tool.
  # https://github.com/louislam/uptime-kuma
  uptime-kuma:
    container_name: uptime-kuma
    hostname: uptime-kuma
    image: louislam/uptime-kuma
    restart: always
    ports:
      - 3005:3001
    dns:
      - 1.1.1.1
      - 8.8.8.8
    volumes:
      - ${SELF_HOME_DIR}/uptimekuma:/app/data
    env_file:
      - .env

  # Diun
  # Docker Image Update Notifier is a CLI application written in Go and delivered as a single executable (and a Docker image) 
  # to receive notifications when a Docker image is updated on a Docker registry.
  # https://crazymax.dev/diun/
  diun:
    container_name: diun
    image: crazymax/diun:latest
    command: serve
    volumes:
      - "${SELF_HOME_DIR}/diun/data:/data"
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    environment:
      - "DIUN_WATCH_SCHEDULE=0 19 * * FRI,SAT,SUN"
      - "LOG_LEVEL=info"
      - "LOG_JSON=false"
    restart: always

  # Fleuntd
  # Fluentd is an open-source data collector for a unified logging layer. 
  # Fluentd allows you to unify data collection and consumption for better use and understanding of data.
  # https://www.fluentd.org/
  fluentd:
    build: "${SELF_HOME_DIR}/fluentd"
    profiles:
      - donotstart #do not start service
    volumes:
      - "${SELF_HOME_DIR}/fluentd/conf:/fluentd/etc"
    depends_on:
      # Launch fluentd after that elasticsearch is ready to connect
      elasticsearch:
        condition: service_healthy
    ports:
      - "24224:24224"
      - "24224:24224/udp"

  # Elastic Search
  # Elasticsearch is an open source distributed, RESTful search and analytics engine, scalable data store, 
  # and vector database capable of addressing a growing number of use cases.
  # https://www.elastic.co/elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.2
    container_name: elasticsearch
    profiles:
      - donotstart #do not start service
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # Disable security for testing
    volumes:
      - "${SELF_HOME_DIR}/elasticsearch/data:/usr/share/elasticsearch/data"
      - "${SELF_HOME_DIR}/elasticsearch/config/elasticsearch.yml:/etc/elasticsearch/config/elasticsearch.yml"
    env_file:
      - .env
    healthcheck:
      # Check whether service is ready
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      retries: 5
      timeout: 1m
      start_period: 10m
    ports:
      - 9200:9200

  # Kibana
  # Kibana is a data visualization and exploration tool used for log and time-series analytics, application monitoring, and operational intelligence use cases. 
  # It offers powerful and easy-to-use features such as histograms, line graphs, pie charts, heat maps, and built-in geospatial support.
  # https://www.elastic.co/kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.2
    container_name: kibana
    profiles:
      - donotstart #do not start service
    env_file:
      - .env
    volumes:
      - "${SELF_HOME_DIR}/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml"
    depends_on:
      # Launch kibana after that elasticsearch is ready to connect
      elasticsearch:
        condition: service_healthy
    healthcheck:
      # Check whether service is ready
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 30s
      retries: 5
      timeout: 1m
      start_period: 5m
    ports:
      - "5601:5601"

  # Docker Autoheal
  # Monitor and restart unhealthy docker containers. 
  # This functionality was proposed to be included with the addition of HEALTHCHECK, however didn't make the cut. This container is a stand-in till there is native support for --exit-on-unhealthy moby/moby#22719.
  # https://github.com/willfarrell/docker-autoheal
  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    deploy:
      replicas: 1
    environment:
      AUTOHEAL_CONTAINER_LABEL: autoheal
    network_mode: none
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  monitor-net:
    driver: bridge
