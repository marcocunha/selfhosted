#!/usr/bin/env bash

#
# In order to add this helper to your terminal you should set some env variables first:
# echo 'export SELF_HOME_DIR="/selfhosted"' >> ~/.bashrc
# echo 'export PATH="$PATH:$SELF_HOME_DIR/bin"' >> ~/.bashrc
# source ~/.bashrc
#
#

COMMAND="$1"
shift 1
COMMAND_ARGS=("${@}")

#
# UTILS
#

function self:utils:validate() {
  if [ "$(type -t self:command:"$COMMAND")" = function ]; then
    return 0
  elif [ -z "$COMMAND" ]; then
    self:command:help
    return 1
  else
    echo "Unknown command: $COMMAND";
    return 1
  fi
}

function self:exists() {
  command -v "$1" > /dev/null 2>&1
}

function self::load_vars() {
  # shellcheck disable=SC2046
  export $(grep -v '^#' "$1" | xargs);
}

#
# COMMANDS
#

function self:command:help() {
  echo "
  ðŸ“Ÿ Self-hosted helper

  self help                       print this help message
  self init                       install dependencies
  self start                      start all services
  self stop                       stop all services
  self down                       stop and remove all containers
  self restart                    restart all services
  self update                     stop, update and restart all services
  self prune                      delete obsolete containers
  self password                   generate a password
  self docs                       start dev server for docs
  self ports                      show all ports in use
"
}

function self:command:init() {
  # Update packages
  brew update
  brew upgrade
  
  echo "Installing python dependencies..."
  pip3 install -r "$SELF_HOME_DIR/requirements.txt"
  
  echo "Done!"
  echo "Please, reboot!"
}

function self:command:start() {
  echo "Starting containers..."
  docker compose up -d
}

function self:command:stop() {
  echo "Stopping containers..."
  docker compose stop
}

function self:command:down() {
  echo "Stopping and removing containers..."
  docker compose down --remove-orphans
}

function self:command:restart() {
  echo "Restarting containers..."
  docker compose restart
}

function self:command:update() {
  echo "Pulling latest images..."
  docker compose pull
  echo "Building images..."
  docker compose build
  echo "Starting containers..."
  docker compose up -d
  echo "Prune to free up space..."
  docker system prune --volumes -f
}

function self:command:prune() {
  echo "Deletting all images not associated with a container..."
  docker system prune --volumes
}

function self:command:password() {
  local password length
  length=${1:-16}
  password="$(openssl rand -base64 $length | rev | cut -b 2- | rev)";

  echo "$password"
}

function self:command:docs() {
  cd "$SELF_HOME_DIR/docs";
  bundle exec jekyll serve 
}

function self:command:ports() {
  sudo lsof -i -P -n | grep LISTEN
}

#
# MAIN
#

function main() {
  if [ -z "$SELF_HOME_DIR" ]; then
    echo "\$SELF_HOME_DIR is unset";
    return 1;
  fi;

  cd "$SELF_HOME_DIR" || exit 1

  if ! self:utils:validate; then
    return 1
  fi

  self::load_vars "$SELF_HOME_DIR/.env"

  self:command:"$COMMAND" "${COMMAND_ARGS[*]}"

  return $?
}

main
